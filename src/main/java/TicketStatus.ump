namespace ca.mcgill.ecse.assetplus.model;

// Authors: Émilia Gagné, Julia B.Grenier
class TicketStatus {
  // Needs the enums of MaintenanceTicket
  depend ca.mcgill.ecse.assetplus.model.MaintenanceTicket.PriorityLevel;
  depend ca.mcgill.ecse.assetplus.model.MaintenanceTicket.TimeEstimate;
  depend ca.mcgill.ecse.assetplus.application.AssetPlusApplication;
  // Also needs to deal with date
  depend java.sql.Date;
	
  Status {
    Open { 
      managerReviews(HotelStaff staff, PriorityLevel priority, TimeEstimate timeToResolve, boolean approvalRequired) / {
                doReview(staff, priority, timeToResolve, approvalRequired);
            } -> Assigned;
    }
    Assigned {
      startWork() -> InProgress;
    }
    InProgress {
      completeWork() [getMaintenanceTicket().hasFixApprover()] -> Resolved;
      completeWork() [!getMaintenanceTicket().hasFixApprover()] -> Closed;
    }
    Resolved {
      approveWork() -> Closed;
      disapproveWork(Date date, String desc, HotelStaff noteTaker) / {
      	doDisapproveWork(date, desc, noteTaker);
      } -> InProgress;
                         
    }
    Closed {}
  }
  
  private void doReview(HotelStaff staff, PriorityLevel priority, TimeEstimate timeToResolve, boolean approvalRequired) {
    MaintenanceTicket ticket = getMaintenanceTicket();
    
    if (ticket != null && ticket.hasTicketFixer()) {
      ticket.setTicketFixer(staff);
      ticket.setPriority(priority);
      ticket.setTimeToResolve(timeToResolve);
      ticket.setFixApprover(approvalRequired ? AssetPlusApplication.getAssetPlus().getManager() : null);
    }
  }
  
  private void doDisapproveWork(Date date, String desc, HotelStaff noteTaker) {
    MaintenanceTicket ticket = getMaintenanceTicket();
    
    if (ticket != null) {
      MaintenanceNote newNote = ticket.addTicketNote(date, desc, noteTaker);
      ticket.addTicketNote(newNote);
    }
  }
}